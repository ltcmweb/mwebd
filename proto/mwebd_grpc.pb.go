// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: mwebd.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rpc_Status_FullMethodName           = "/Rpc/Status"
	Rpc_Utxos_FullMethodName            = "/Rpc/Utxos"
	Rpc_Addresses_FullMethodName        = "/Rpc/Addresses"
	Rpc_Spent_FullMethodName            = "/Rpc/Spent"
	Rpc_Create_FullMethodName           = "/Rpc/Create"
	Rpc_PsbtCreate_FullMethodName       = "/Rpc/PsbtCreate"
	Rpc_PsbtAddInput_FullMethodName     = "/Rpc/PsbtAddInput"
	Rpc_PsbtAddRecipient_FullMethodName = "/Rpc/PsbtAddRecipient"
	Rpc_PsbtAddPegout_FullMethodName    = "/Rpc/PsbtAddPegout"
	Rpc_PsbtSign_FullMethodName         = "/Rpc/PsbtSign"
	Rpc_PsbtSignNonMweb_FullMethodName  = "/Rpc/PsbtSignNonMweb"
	Rpc_PsbtExtract_FullMethodName      = "/Rpc/PsbtExtract"
	Rpc_LedgerExchange_FullMethodName   = "/Rpc/LedgerExchange"
	Rpc_Broadcast_FullMethodName        = "/Rpc/Broadcast"
	Rpc_Coinswap_FullMethodName         = "/Rpc/Coinswap"
)

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcClient interface {
	// Get the sync status of the daemon. The block headers are
	// synced first, followed by a subset of MWEB headers, and
	// finally the MWEB utxo set.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Get a continuous stream of unspent MWEB outputs (utxos)
	// for an account.
	Utxos(ctx context.Context, in *UtxosRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Utxo], error)
	// Get a batch of MWEB addresses for an account.
	Addresses(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	// Check whether MWEB outputs are in the unspent set or not.
	// This is used to determine when outputs have been spent by
	// either this or another wallet using the same seed, and to
	// determine when MWEB transactions have confirmed by checking
	// the output IDs of the MWEB inputs and outputs.
	Spent(ctx context.Context, in *SpentRequest, opts ...grpc.CallOption) (*SpentResponse, error)
	// Create the MWEB portion of a transaction.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Create a PSBT from a raw transaction.
	PsbtCreate(ctx context.Context, in *PsbtCreateRequest, opts ...grpc.CallOption) (*PsbtResponse, error)
	// Add a MWEB input to a PSBT.
	PsbtAddInput(ctx context.Context, in *PsbtAddInputRequest, opts ...grpc.CallOption) (*PsbtResponse, error)
	// Add a MWEB recipient to a PSBT.
	PsbtAddRecipient(ctx context.Context, in *PsbtAddRecipientRequest, opts ...grpc.CallOption) (*PsbtResponse, error)
	// Add a MWEB peg-out to a PSBT.
	PsbtAddPegout(ctx context.Context, in *PsbtAddPegoutRequest, opts ...grpc.CallOption) (*PsbtResponse, error)
	// Sign the MWEB portion of a PSBT.
	PsbtSign(ctx context.Context, in *PsbtSignRequest, opts ...grpc.CallOption) (*PsbtResponse, error)
	// Sign a non-MWEB input of a PSBT.
	PsbtSignNonMweb(ctx context.Context, in *PsbtSignNonMwebRequest, opts ...grpc.CallOption) (*PsbtResponse, error)
	// Extract the raw transaction from a signed PSBT.
	PsbtExtract(ctx context.Context, in *PsbtExtractRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Process APDUs from the Ledger.
	LedgerExchange(ctx context.Context, in *LedgerApdu, opts ...grpc.CallOption) (*LedgerApdu, error)
	// Broadcast a transaction to the network. This is provided as
	// existing broadcast services may not support MWEB transactions.
	Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
	// Submit a coinswap request.
	Coinswap(ctx context.Context, in *CoinswapRequest, opts ...grpc.CallOption) (*CoinswapResponse, error)
}

type rpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClient(cc grpc.ClientConnInterface) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Rpc_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Utxos(ctx context.Context, in *UtxosRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Utxo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rpc_ServiceDesc.Streams[0], Rpc_Utxos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UtxosRequest, Utxo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_UtxosClient = grpc.ServerStreamingClient[Utxo]

func (c *rpcClient) Addresses(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, Rpc_Addresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Spent(ctx context.Context, in *SpentRequest, opts ...grpc.CallOption) (*SpentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpentResponse)
	err := c.cc.Invoke(ctx, Rpc_Spent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Rpc_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PsbtCreate(ctx context.Context, in *PsbtCreateRequest, opts ...grpc.CallOption) (*PsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsbtResponse)
	err := c.cc.Invoke(ctx, Rpc_PsbtCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PsbtAddInput(ctx context.Context, in *PsbtAddInputRequest, opts ...grpc.CallOption) (*PsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsbtResponse)
	err := c.cc.Invoke(ctx, Rpc_PsbtAddInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PsbtAddRecipient(ctx context.Context, in *PsbtAddRecipientRequest, opts ...grpc.CallOption) (*PsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsbtResponse)
	err := c.cc.Invoke(ctx, Rpc_PsbtAddRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PsbtAddPegout(ctx context.Context, in *PsbtAddPegoutRequest, opts ...grpc.CallOption) (*PsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsbtResponse)
	err := c.cc.Invoke(ctx, Rpc_PsbtAddPegout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PsbtSign(ctx context.Context, in *PsbtSignRequest, opts ...grpc.CallOption) (*PsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsbtResponse)
	err := c.cc.Invoke(ctx, Rpc_PsbtSign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PsbtSignNonMweb(ctx context.Context, in *PsbtSignNonMwebRequest, opts ...grpc.CallOption) (*PsbtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsbtResponse)
	err := c.cc.Invoke(ctx, Rpc_PsbtSignNonMweb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PsbtExtract(ctx context.Context, in *PsbtExtractRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Rpc_PsbtExtract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) LedgerExchange(ctx context.Context, in *LedgerApdu, opts ...grpc.CallOption) (*LedgerApdu, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerApdu)
	err := c.cc.Invoke(ctx, Rpc_LedgerExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, Rpc_Broadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Coinswap(ctx context.Context, in *CoinswapRequest, opts ...grpc.CallOption) (*CoinswapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoinswapResponse)
	err := c.cc.Invoke(ctx, Rpc_Coinswap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
// All implementations must embed UnimplementedRpcServer
// for forward compatibility.
type RpcServer interface {
	// Get the sync status of the daemon. The block headers are
	// synced first, followed by a subset of MWEB headers, and
	// finally the MWEB utxo set.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Get a continuous stream of unspent MWEB outputs (utxos)
	// for an account.
	Utxos(*UtxosRequest, grpc.ServerStreamingServer[Utxo]) error
	// Get a batch of MWEB addresses for an account.
	Addresses(context.Context, *AddressRequest) (*AddressResponse, error)
	// Check whether MWEB outputs are in the unspent set or not.
	// This is used to determine when outputs have been spent by
	// either this or another wallet using the same seed, and to
	// determine when MWEB transactions have confirmed by checking
	// the output IDs of the MWEB inputs and outputs.
	Spent(context.Context, *SpentRequest) (*SpentResponse, error)
	// Create the MWEB portion of a transaction.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Create a PSBT from a raw transaction.
	PsbtCreate(context.Context, *PsbtCreateRequest) (*PsbtResponse, error)
	// Add a MWEB input to a PSBT.
	PsbtAddInput(context.Context, *PsbtAddInputRequest) (*PsbtResponse, error)
	// Add a MWEB recipient to a PSBT.
	PsbtAddRecipient(context.Context, *PsbtAddRecipientRequest) (*PsbtResponse, error)
	// Add a MWEB peg-out to a PSBT.
	PsbtAddPegout(context.Context, *PsbtAddPegoutRequest) (*PsbtResponse, error)
	// Sign the MWEB portion of a PSBT.
	PsbtSign(context.Context, *PsbtSignRequest) (*PsbtResponse, error)
	// Sign a non-MWEB input of a PSBT.
	PsbtSignNonMweb(context.Context, *PsbtSignNonMwebRequest) (*PsbtResponse, error)
	// Extract the raw transaction from a signed PSBT.
	PsbtExtract(context.Context, *PsbtExtractRequest) (*CreateResponse, error)
	// Process APDUs from the Ledger.
	LedgerExchange(context.Context, *LedgerApdu) (*LedgerApdu, error)
	// Broadcast a transaction to the network. This is provided as
	// existing broadcast services may not support MWEB transactions.
	Broadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error)
	// Submit a coinswap request.
	Coinswap(context.Context, *CoinswapRequest) (*CoinswapResponse, error)
	mustEmbedUnimplementedRpcServer()
}

// UnimplementedRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRpcServer struct{}

func (UnimplementedRpcServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedRpcServer) Utxos(*UtxosRequest, grpc.ServerStreamingServer[Utxo]) error {
	return status.Errorf(codes.Unimplemented, "method Utxos not implemented")
}
func (UnimplementedRpcServer) Addresses(context.Context, *AddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addresses not implemented")
}
func (UnimplementedRpcServer) Spent(context.Context, *SpentRequest) (*SpentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spent not implemented")
}
func (UnimplementedRpcServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRpcServer) PsbtCreate(context.Context, *PsbtCreateRequest) (*PsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PsbtCreate not implemented")
}
func (UnimplementedRpcServer) PsbtAddInput(context.Context, *PsbtAddInputRequest) (*PsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PsbtAddInput not implemented")
}
func (UnimplementedRpcServer) PsbtAddRecipient(context.Context, *PsbtAddRecipientRequest) (*PsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PsbtAddRecipient not implemented")
}
func (UnimplementedRpcServer) PsbtAddPegout(context.Context, *PsbtAddPegoutRequest) (*PsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PsbtAddPegout not implemented")
}
func (UnimplementedRpcServer) PsbtSign(context.Context, *PsbtSignRequest) (*PsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PsbtSign not implemented")
}
func (UnimplementedRpcServer) PsbtSignNonMweb(context.Context, *PsbtSignNonMwebRequest) (*PsbtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PsbtSignNonMweb not implemented")
}
func (UnimplementedRpcServer) PsbtExtract(context.Context, *PsbtExtractRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PsbtExtract not implemented")
}
func (UnimplementedRpcServer) LedgerExchange(context.Context, *LedgerApdu) (*LedgerApdu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerExchange not implemented")
}
func (UnimplementedRpcServer) Broadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedRpcServer) Coinswap(context.Context, *CoinswapRequest) (*CoinswapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Coinswap not implemented")
}
func (UnimplementedRpcServer) mustEmbedUnimplementedRpcServer() {}
func (UnimplementedRpcServer) testEmbeddedByValue()             {}

// UnsafeRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcServer will
// result in compilation errors.
type UnsafeRpcServer interface {
	mustEmbedUnimplementedRpcServer()
}

func RegisterRpcServer(s grpc.ServiceRegistrar, srv RpcServer) {
	// If the following call pancis, it indicates UnimplementedRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rpc_ServiceDesc, srv)
}

func _Rpc_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Utxos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UtxosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcServer).Utxos(m, &grpc.GenericServerStream[UtxosRequest, Utxo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rpc_UtxosServer = grpc.ServerStreamingServer[Utxo]

func _Rpc_Addresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Addresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_Addresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Addresses(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Spent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Spent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_Spent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Spent(ctx, req.(*SpentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PsbtCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsbtCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PsbtCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_PsbtCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PsbtCreate(ctx, req.(*PsbtCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PsbtAddInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsbtAddInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PsbtAddInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_PsbtAddInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PsbtAddInput(ctx, req.(*PsbtAddInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PsbtAddRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsbtAddRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PsbtAddRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_PsbtAddRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PsbtAddRecipient(ctx, req.(*PsbtAddRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PsbtAddPegout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsbtAddPegoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PsbtAddPegout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_PsbtAddPegout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PsbtAddPegout(ctx, req.(*PsbtAddPegoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PsbtSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsbtSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PsbtSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_PsbtSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PsbtSign(ctx, req.(*PsbtSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PsbtSignNonMweb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsbtSignNonMwebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PsbtSignNonMweb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_PsbtSignNonMweb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PsbtSignNonMweb(ctx, req.(*PsbtSignNonMwebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PsbtExtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PsbtExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PsbtExtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_PsbtExtract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PsbtExtract(ctx, req.(*PsbtExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_LedgerExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerApdu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).LedgerExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_LedgerExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).LedgerExchange(ctx, req.(*LedgerApdu))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Broadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Coinswap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinswapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Coinswap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_Coinswap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Coinswap(ctx, req.(*CoinswapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rpc_ServiceDesc is the grpc.ServiceDesc for Rpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Rpc_Status_Handler,
		},
		{
			MethodName: "Addresses",
			Handler:    _Rpc_Addresses_Handler,
		},
		{
			MethodName: "Spent",
			Handler:    _Rpc_Spent_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Rpc_Create_Handler,
		},
		{
			MethodName: "PsbtCreate",
			Handler:    _Rpc_PsbtCreate_Handler,
		},
		{
			MethodName: "PsbtAddInput",
			Handler:    _Rpc_PsbtAddInput_Handler,
		},
		{
			MethodName: "PsbtAddRecipient",
			Handler:    _Rpc_PsbtAddRecipient_Handler,
		},
		{
			MethodName: "PsbtAddPegout",
			Handler:    _Rpc_PsbtAddPegout_Handler,
		},
		{
			MethodName: "PsbtSign",
			Handler:    _Rpc_PsbtSign_Handler,
		},
		{
			MethodName: "PsbtSignNonMweb",
			Handler:    _Rpc_PsbtSignNonMweb_Handler,
		},
		{
			MethodName: "PsbtExtract",
			Handler:    _Rpc_PsbtExtract_Handler,
		},
		{
			MethodName: "LedgerExchange",
			Handler:    _Rpc_LedgerExchange_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Rpc_Broadcast_Handler,
		},
		{
			MethodName: "Coinswap",
			Handler:    _Rpc_Coinswap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Utxos",
			Handler:       _Rpc_Utxos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mwebd.proto",
}
